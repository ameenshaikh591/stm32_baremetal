
miniOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000b98  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000d5c  08000d5c  00002054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000d5c  08000d5c  00002054  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08000d5c  08000d5c  00001d5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08000d64  08000d64  00002054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08000d64  08000d64  00001d64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000d6c  08000d6c  00001d6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000054  20000000  08000d70  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000278  20000054  08000dc4  00002054  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002cc  08000dc4  000022cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002054  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000394c  00000000  00000000  00002084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000117a  00000000  00000000  000059d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000002b0  00000000  00000000  00006b50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000001dd  00000000  00000000  00006e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000047ab  00000000  00000000  00006fdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003330  00000000  00000000  0000b788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000c9f9  00000000  00000000  0000eab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0001b4b1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000da0  00000000  00000000  0001b4f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  0001c294  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000054 	.word	0x20000054
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000d44 	.word	0x08000d44

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000058 	.word	0x20000058
 8000200:	08000d44 	.word	0x08000d44

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <_ZN3CLIC1Ev>:
#include "../uart.h"
#include "Manager.h"
#include "CLI.h"


CLI::CLI() {
 8000214:	b480      	push	{r7}
 8000216:	b083      	sub	sp, #12
 8000218:	af00      	add	r7, sp, #0
 800021a:	6078      	str	r0, [r7, #4]

}
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	4618      	mov	r0, r3
 8000220:	370c      	adds	r7, #12
 8000222:	46bd      	mov	sp, r7
 8000224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000228:	4770      	bx	lr

0800022a <_ZN3CLI3runEv>:

void CLI::run() {
 800022a:	b590      	push	{r4, r7, lr}
 800022c:	b085      	sub	sp, #20
 800022e:	af00      	add	r7, sp, #0
 8000230:	6078      	str	r0, [r7, #4]
	UART *uart_test_obj = new UART(usart_num_t::USART2);
 8000232:	2038      	movs	r0, #56	@ 0x38
 8000234:	f000 fc2d 	bl	8000a92 <_Znwj>
 8000238:	4603      	mov	r3, r0
 800023a:	461c      	mov	r4, r3
 800023c:	2101      	movs	r1, #1
 800023e:	4620      	mov	r0, r4
 8000240:	f000 faa0 	bl	8000784 <_ZN4UARTC1E11usart_num_t>
 8000244:	60fc      	str	r4, [r7, #12]
	uart_test_obj->enable();
 8000246:	68f8      	ldr	r0, [r7, #12]
 8000248:	f000 faca 	bl	80007e0 <_ZN4UART6enableEv>

	Manager *my_manager = new Manager();
 800024c:	2004      	movs	r0, #4
 800024e:	f000 fc20 	bl	8000a92 <_Znwj>
 8000252:	4603      	mov	r3, r0
 8000254:	2200      	movs	r2, #0
 8000256:	601a      	str	r2, [r3, #0]
 8000258:	60bb      	str	r3, [r7, #8]
	manager = my_manager;
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	68ba      	ldr	r2, [r7, #8]
 800025e:	601a      	str	r2, [r3, #0]
	my_manager->connect_to_usart(uart_test_obj);
 8000260:	68f9      	ldr	r1, [r7, #12]
 8000262:	68b8      	ldr	r0, [r7, #8]
 8000264:	f000 f804 	bl	8000270 <_ZN7Manager16connect_to_usartEP4UART>
}
 8000268:	bf00      	nop
 800026a:	3714      	adds	r7, #20
 800026c:	46bd      	mov	sp, r7
 800026e:	bd90      	pop	{r4, r7, pc}

08000270 <_ZN7Manager16connect_to_usartEP4UART>:
};

static char command_buffer[COMMAND_BUFFER_SIZE];
static char echo_buffer[2];

void Manager::connect_to_usart(UART *usart_obj) {
 8000270:	b480      	push	{r7}
 8000272:	b083      	sub	sp, #12
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
 8000278:	6039      	str	r1, [r7, #0]
	usart_obj->usart_manager = this;
 800027a:	683b      	ldr	r3, [r7, #0]
 800027c:	687a      	ldr	r2, [r7, #4]
 800027e:	605a      	str	r2, [r3, #4]
	managed_usart = usart_obj;
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	683a      	ldr	r2, [r7, #0]
 8000284:	601a      	str	r2, [r3, #0]
	command_buffer[0] = '\r';
 8000286:	4b06      	ldr	r3, [pc, #24]	@ (80002a0 <_ZN7Manager16connect_to_usartEP4UART+0x30>)
 8000288:	220d      	movs	r2, #13
 800028a:	701a      	strb	r2, [r3, #0]
	command_buffer[1] = '\n';
 800028c:	4b04      	ldr	r3, [pc, #16]	@ (80002a0 <_ZN7Manager16connect_to_usartEP4UART+0x30>)
 800028e:	220a      	movs	r2, #10
 8000290:	705a      	strb	r2, [r3, #1]
}
 8000292:	bf00      	nop
 8000294:	370c      	adds	r7, #12
 8000296:	46bd      	mov	sp, r7
 8000298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop
 80002a0:	20000070 	.word	0x20000070

080002a4 <_ZN7Manager13send_responseEPc>:

void Manager::send_response(char *buffer_to_send) {
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b082      	sub	sp, #8
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	6078      	str	r0, [r7, #4]
 80002ac:	6039      	str	r1, [r7, #0]
	managed_usart->send(buffer_to_send);
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	6839      	ldr	r1, [r7, #0]
 80002b4:	4618      	mov	r0, r3
 80002b6:	f000 fb90 	bl	80009da <_ZN4UART4sendEPc>
}
 80002ba:	bf00      	nop
 80002bc:	3708      	adds	r7, #8
 80002be:	46bd      	mov	sp, r7
 80002c0:	bd80      	pop	{r7, pc}
	...

080002c4 <_ZN7Manager16manage_read_byteEm>:

void Manager::manage_read_byte(uint32_t received_byte) {
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b084      	sub	sp, #16
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	6078      	str	r0, [r7, #4]
 80002cc:	6039      	str	r1, [r7, #0]
	static uint8_t buffer_open_index = 2;
	char character = static_cast<char>(received_byte);
 80002ce:	683b      	ldr	r3, [r7, #0]
 80002d0:	73fb      	strb	r3, [r7, #15]
	if (buffer_open_index < COMMAND_BUFFER_SIZE - 3) {
 80002d2:	4b27      	ldr	r3, [pc, #156]	@ (8000370 <_ZN7Manager16manage_read_byteEm+0xac>)
 80002d4:	781b      	ldrb	r3, [r3, #0]
 80002d6:	2b60      	cmp	r3, #96	@ 0x60
 80002d8:	d82f      	bhi.n	800033a <_ZN7Manager16manage_read_byteEm+0x76>
		if (character == '\r') {
 80002da:	7bfb      	ldrb	r3, [r7, #15]
 80002dc:	2b0d      	cmp	r3, #13
 80002de:	d121      	bne.n	8000324 <_ZN7Manager16manage_read_byteEm+0x60>
			command_buffer[buffer_open_index++] = '\r';
 80002e0:	4b23      	ldr	r3, [pc, #140]	@ (8000370 <_ZN7Manager16manage_read_byteEm+0xac>)
 80002e2:	781b      	ldrb	r3, [r3, #0]
 80002e4:	1c5a      	adds	r2, r3, #1
 80002e6:	b2d1      	uxtb	r1, r2
 80002e8:	4a21      	ldr	r2, [pc, #132]	@ (8000370 <_ZN7Manager16manage_read_byteEm+0xac>)
 80002ea:	7011      	strb	r1, [r2, #0]
 80002ec:	461a      	mov	r2, r3
 80002ee:	4b21      	ldr	r3, [pc, #132]	@ (8000374 <_ZN7Manager16manage_read_byteEm+0xb0>)
 80002f0:	210d      	movs	r1, #13
 80002f2:	5499      	strb	r1, [r3, r2]
			command_buffer[buffer_open_index++] = '\n';
 80002f4:	4b1e      	ldr	r3, [pc, #120]	@ (8000370 <_ZN7Manager16manage_read_byteEm+0xac>)
 80002f6:	781b      	ldrb	r3, [r3, #0]
 80002f8:	1c5a      	adds	r2, r3, #1
 80002fa:	b2d1      	uxtb	r1, r2
 80002fc:	4a1c      	ldr	r2, [pc, #112]	@ (8000370 <_ZN7Manager16manage_read_byteEm+0xac>)
 80002fe:	7011      	strb	r1, [r2, #0]
 8000300:	461a      	mov	r2, r3
 8000302:	4b1c      	ldr	r3, [pc, #112]	@ (8000374 <_ZN7Manager16manage_read_byteEm+0xb0>)
 8000304:	210a      	movs	r1, #10
 8000306:	5499      	strb	r1, [r3, r2]
			command_buffer[buffer_open_index] = '\0';
 8000308:	4b19      	ldr	r3, [pc, #100]	@ (8000370 <_ZN7Manager16manage_read_byteEm+0xac>)
 800030a:	781b      	ldrb	r3, [r3, #0]
 800030c:	461a      	mov	r2, r3
 800030e:	4b19      	ldr	r3, [pc, #100]	@ (8000374 <_ZN7Manager16manage_read_byteEm+0xb0>)
 8000310:	2100      	movs	r1, #0
 8000312:	5499      	strb	r1, [r3, r2]
			buffer_open_index = 2;
 8000314:	4b16      	ldr	r3, [pc, #88]	@ (8000370 <_ZN7Manager16manage_read_byteEm+0xac>)
 8000316:	2202      	movs	r2, #2
 8000318:	701a      	strb	r2, [r3, #0]
			send_response(command_buffer);
 800031a:	4916      	ldr	r1, [pc, #88]	@ (8000374 <_ZN7Manager16manage_read_byteEm+0xb0>)
 800031c:	6878      	ldr	r0, [r7, #4]
 800031e:	f7ff ffc1 	bl	80002a4 <_ZN7Manager13send_responseEPc>
			return;
 8000322:	e021      	b.n	8000368 <_ZN7Manager16manage_read_byteEm+0xa4>
		} else {
			command_buffer[buffer_open_index++] = character;
 8000324:	4b12      	ldr	r3, [pc, #72]	@ (8000370 <_ZN7Manager16manage_read_byteEm+0xac>)
 8000326:	781b      	ldrb	r3, [r3, #0]
 8000328:	1c5a      	adds	r2, r3, #1
 800032a:	b2d1      	uxtb	r1, r2
 800032c:	4a10      	ldr	r2, [pc, #64]	@ (8000370 <_ZN7Manager16manage_read_byteEm+0xac>)
 800032e:	7011      	strb	r1, [r2, #0]
 8000330:	4619      	mov	r1, r3
 8000332:	4a10      	ldr	r2, [pc, #64]	@ (8000374 <_ZN7Manager16manage_read_byteEm+0xb0>)
 8000334:	7bfb      	ldrb	r3, [r7, #15]
 8000336:	5453      	strb	r3, [r2, r1]
 8000338:	e00c      	b.n	8000354 <_ZN7Manager16manage_read_byteEm+0x90>
		}
	} else {
	    buffer_open_index = 2;
 800033a:	4b0d      	ldr	r3, [pc, #52]	@ (8000370 <_ZN7Manager16manage_read_byteEm+0xac>)
 800033c:	2202      	movs	r2, #2
 800033e:	701a      	strb	r2, [r3, #0]
	    command_buffer[buffer_open_index++] = character;
 8000340:	4b0b      	ldr	r3, [pc, #44]	@ (8000370 <_ZN7Manager16manage_read_byteEm+0xac>)
 8000342:	781b      	ldrb	r3, [r3, #0]
 8000344:	1c5a      	adds	r2, r3, #1
 8000346:	b2d1      	uxtb	r1, r2
 8000348:	4a09      	ldr	r2, [pc, #36]	@ (8000370 <_ZN7Manager16manage_read_byteEm+0xac>)
 800034a:	7011      	strb	r1, [r2, #0]
 800034c:	4619      	mov	r1, r3
 800034e:	4a09      	ldr	r2, [pc, #36]	@ (8000374 <_ZN7Manager16manage_read_byteEm+0xb0>)
 8000350:	7bfb      	ldrb	r3, [r7, #15]
 8000352:	5453      	strb	r3, [r2, r1]
	}

	echo_buffer[0] = character;
 8000354:	4a08      	ldr	r2, [pc, #32]	@ (8000378 <_ZN7Manager16manage_read_byteEm+0xb4>)
 8000356:	7bfb      	ldrb	r3, [r7, #15]
 8000358:	7013      	strb	r3, [r2, #0]
	echo_buffer[1] = '\0';
 800035a:	4b07      	ldr	r3, [pc, #28]	@ (8000378 <_ZN7Manager16manage_read_byteEm+0xb4>)
 800035c:	2200      	movs	r2, #0
 800035e:	705a      	strb	r2, [r3, #1]
	send_response(echo_buffer);
 8000360:	4905      	ldr	r1, [pc, #20]	@ (8000378 <_ZN7Manager16manage_read_byteEm+0xb4>)
 8000362:	6878      	ldr	r0, [r7, #4]
 8000364:	f7ff ff9e 	bl	80002a4 <_ZN7Manager13send_responseEPc>
}
 8000368:	3710      	adds	r7, #16
 800036a:	46bd      	mov	sp, r7
 800036c:	bd80      	pop	{r7, pc}
 800036e:	bf00      	nop
 8000370:	20000000 	.word	0x20000000
 8000374:	20000070 	.word	0x20000070
 8000378:	200000d4 	.word	0x200000d4

0800037c <_ZN4GPIOC1E6port_t>:

#define GPIOA ((GPIO_TypeDef*) 0x40020000)
#define RCC_AHB1ENR (*((volatile uint32_t*) 0x40023830))
#define RCC_GPIOA_EN 1

GPIO::GPIO(port_t port) {
 800037c:	b480      	push	{r7}
 800037e:	b083      	sub	sp, #12
 8000380:	af00      	add	r7, sp, #0
 8000382:	6078      	str	r0, [r7, #4]
 8000384:	460b      	mov	r3, r1
 8000386:	70fb      	strb	r3, [r7, #3]
	switch (port) {
 8000388:	78fb      	ldrb	r3, [r7, #3]
 800038a:	2b00      	cmp	r3, #0
 800038c:	d106      	bne.n	800039c <_ZN4GPIOC1E6port_t+0x20>
		case PORT_A:
			gpio_port_ = GPIOA;
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	4a06      	ldr	r2, [pc, #24]	@ (80003ac <_ZN4GPIOC1E6port_t+0x30>)
 8000392:	601a      	str	r2, [r3, #0]
			port_ = PORT_A;
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	2200      	movs	r2, #0
 8000398:	711a      	strb	r2, [r3, #4]
			break;
 800039a:	e000      	b.n	800039e <_ZN4GPIOC1E6port_t+0x22>
		default:
			break;
 800039c:	bf00      	nop
	}
}
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	4618      	mov	r0, r3
 80003a2:	370c      	adds	r7, #12
 80003a4:	46bd      	mov	sp, r7
 80003a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003aa:	4770      	bx	lr
 80003ac:	40020000 	.word	0x40020000

080003b0 <_ZN4GPIO6enableEv>:

void GPIO::enable() {
 80003b0:	b480      	push	{r7}
 80003b2:	b083      	sub	sp, #12
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]
	RCC_AHB1ENR |= RCC_GPIOA_EN;
 80003b8:	4b05      	ldr	r3, [pc, #20]	@ (80003d0 <_ZN4GPIO6enableEv+0x20>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	4a04      	ldr	r2, [pc, #16]	@ (80003d0 <_ZN4GPIO6enableEv+0x20>)
 80003be:	f043 0301 	orr.w	r3, r3, #1
 80003c2:	6013      	str	r3, [r2, #0]
}
 80003c4:	bf00      	nop
 80003c6:	370c      	adds	r7, #12
 80003c8:	46bd      	mov	sp, r7
 80003ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ce:	4770      	bx	lr
 80003d0:	40023830 	.word	0x40023830

080003d4 <_ZN4GPIO9pin_setupE5pin_t6mode_t14alt_function_t>:

void GPIO::pin_setup(pin_t pin, mode_t mode) {
	gpio_port_->MODER |= set_mask(pin, mode);
}

void GPIO::pin_setup(pin_t pin, mode_t mode, alt_function_t alt_function) {
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b082      	sub	sp, #8
 80003d8:	af00      	add	r7, sp, #0
 80003da:	6078      	str	r0, [r7, #4]
 80003dc:	4608      	mov	r0, r1
 80003de:	4611      	mov	r1, r2
 80003e0:	461a      	mov	r2, r3
 80003e2:	4603      	mov	r3, r0
 80003e4:	70fb      	strb	r3, [r7, #3]
 80003e6:	460b      	mov	r3, r1
 80003e8:	70bb      	strb	r3, [r7, #2]
 80003ea:	4613      	mov	r3, r2
 80003ec:	707b      	strb	r3, [r7, #1]
	gpio_port_->MODER |= set_mask(pin, mode);
 80003ee:	78ba      	ldrb	r2, [r7, #2]
 80003f0:	78fb      	ldrb	r3, [r7, #3]
 80003f2:	4619      	mov	r1, r3
 80003f4:	6878      	ldr	r0, [r7, #4]
 80003f6:	f000 f84b 	bl	8000490 <_ZN4GPIO8set_maskE5pin_t6mode_t>
 80003fa:	4601      	mov	r1, r0
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	681a      	ldr	r2, [r3, #0]
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	430a      	orrs	r2, r1
 8000408:	601a      	str	r2, [r3, #0]
	if (pin < 8) {
 800040a:	78fb      	ldrb	r3, [r7, #3]
 800040c:	2b07      	cmp	r3, #7
 800040e:	d81d      	bhi.n	800044c <_ZN4GPIO9pin_setupE5pin_t6mode_t14alt_function_t+0x78>
		gpio_port_->AFRL &= ~set_mask(pin, AF_15);
 8000410:	78fb      	ldrb	r3, [r7, #3]
 8000412:	220f      	movs	r2, #15
 8000414:	4619      	mov	r1, r3
 8000416:	6878      	ldr	r0, [r7, #4]
 8000418:	f000 f874 	bl	8000504 <_ZN4GPIO8set_maskE5pin_t14alt_function_t>
 800041c:	4603      	mov	r3, r0
 800041e:	43d9      	mvns	r1, r3
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	6a1a      	ldr	r2, [r3, #32]
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	400a      	ands	r2, r1
 800042c:	621a      	str	r2, [r3, #32]
		gpio_port_->AFRL |= set_mask(pin, alt_function);
 800042e:	787a      	ldrb	r2, [r7, #1]
 8000430:	78fb      	ldrb	r3, [r7, #3]
 8000432:	4619      	mov	r1, r3
 8000434:	6878      	ldr	r0, [r7, #4]
 8000436:	f000 f865 	bl	8000504 <_ZN4GPIO8set_maskE5pin_t14alt_function_t>
 800043a:	4601      	mov	r1, r0
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	6a1a      	ldr	r2, [r3, #32]
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	430a      	orrs	r2, r1
 8000448:	621a      	str	r2, [r3, #32]
	} else {
		gpio_port_->AFRH &= ~set_mask(pin, AF_15);
		gpio_port_->AFRH |= set_mask(pin, alt_function);
	}
}
 800044a:	e01c      	b.n	8000486 <_ZN4GPIO9pin_setupE5pin_t6mode_t14alt_function_t+0xb2>
		gpio_port_->AFRH &= ~set_mask(pin, AF_15);
 800044c:	78fb      	ldrb	r3, [r7, #3]
 800044e:	220f      	movs	r2, #15
 8000450:	4619      	mov	r1, r3
 8000452:	6878      	ldr	r0, [r7, #4]
 8000454:	f000 f856 	bl	8000504 <_ZN4GPIO8set_maskE5pin_t14alt_function_t>
 8000458:	4603      	mov	r3, r0
 800045a:	43d9      	mvns	r1, r3
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	400a      	ands	r2, r1
 8000468:	625a      	str	r2, [r3, #36]	@ 0x24
		gpio_port_->AFRH |= set_mask(pin, alt_function);
 800046a:	787a      	ldrb	r2, [r7, #1]
 800046c:	78fb      	ldrb	r3, [r7, #3]
 800046e:	4619      	mov	r1, r3
 8000470:	6878      	ldr	r0, [r7, #4]
 8000472:	f000 f847 	bl	8000504 <_ZN4GPIO8set_maskE5pin_t14alt_function_t>
 8000476:	4601      	mov	r1, r0
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	430a      	orrs	r2, r1
 8000484:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000486:	bf00      	nop
 8000488:	3708      	adds	r7, #8
 800048a:	46bd      	mov	sp, r7
 800048c:	bd80      	pop	{r7, pc}
	...

08000490 <_ZN4GPIO8set_maskE5pin_t6mode_t>:

void GPIO::pin_toggle_output(pin_t pin) {
	gpio_port_->ODR ^= set_mask(pin, HIGH);
}

uint32_t GPIO::set_mask(pin_t pin, mode_t mode) {
 8000490:	b480      	push	{r7}
 8000492:	b085      	sub	sp, #20
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
 8000498:	460b      	mov	r3, r1
 800049a:	70fb      	strb	r3, [r7, #3]
 800049c:	4613      	mov	r3, r2
 800049e:	70bb      	strb	r3, [r7, #2]
	int shift_amount = pin * 2;
 80004a0:	78fb      	ldrb	r3, [r7, #3]
 80004a2:	005b      	lsls	r3, r3, #1
 80004a4:	60fb      	str	r3, [r7, #12]
	switch (mode) {
 80004a6:	78bb      	ldrb	r3, [r7, #2]
 80004a8:	2b04      	cmp	r3, #4
 80004aa:	d823      	bhi.n	80004f4 <_ZN4GPIO8set_maskE5pin_t6mode_t+0x64>
 80004ac:	a201      	add	r2, pc, #4	@ (adr r2, 80004b4 <_ZN4GPIO8set_maskE5pin_t6mode_t+0x24>)
 80004ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004b2:	bf00      	nop
 80004b4:	080004c9 	.word	0x080004c9
 80004b8:	080004cd 	.word	0x080004cd
 80004bc:	080004d7 	.word	0x080004d7
 80004c0:	080004e1 	.word	0x080004e1
 80004c4:	080004eb 	.word	0x080004eb
		case INPUT:
			return 0;
 80004c8:	2300      	movs	r3, #0
 80004ca:	e014      	b.n	80004f6 <_ZN4GPIO8set_maskE5pin_t6mode_t+0x66>

		case GENERAL_PURPOSE:
			return 1 << shift_amount;
 80004cc:	2201      	movs	r2, #1
 80004ce:	68fb      	ldr	r3, [r7, #12]
 80004d0:	fa02 f303 	lsl.w	r3, r2, r3
 80004d4:	e00f      	b.n	80004f6 <_ZN4GPIO8set_maskE5pin_t6mode_t+0x66>

		case ALT_FUNCTION:
			return 2 << shift_amount;
 80004d6:	2202      	movs	r2, #2
 80004d8:	68fb      	ldr	r3, [r7, #12]
 80004da:	fa02 f303 	lsl.w	r3, r2, r3
 80004de:	e00a      	b.n	80004f6 <_ZN4GPIO8set_maskE5pin_t6mode_t+0x66>

		case ANALOG:
			return 3 << shift_amount;
 80004e0:	2203      	movs	r2, #3
 80004e2:	68fb      	ldr	r3, [r7, #12]
 80004e4:	fa02 f303 	lsl.w	r3, r2, r3
 80004e8:	e005      	b.n	80004f6 <_ZN4GPIO8set_maskE5pin_t6mode_t+0x66>

		case DEFAULT:
			return 3 << shift_amount;
 80004ea:	2203      	movs	r2, #3
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	fa02 f303 	lsl.w	r3, r2, r3
 80004f2:	e000      	b.n	80004f6 <_ZN4GPIO8set_maskE5pin_t6mode_t+0x66>
 80004f4:	deff      	udf	#255	@ 0xff
	}
}
 80004f6:	4618      	mov	r0, r3
 80004f8:	3714      	adds	r7, #20
 80004fa:	46bd      	mov	sp, r7
 80004fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <_ZN4GPIO8set_maskE5pin_t14alt_function_t>:
uint32_t GPIO::set_mask(pin_t pin, output_t output) {
	int shift_amount = pin;
	return 1 << shift_amount;
}

uint32_t GPIO::set_mask(pin_t pin, alt_function_t alt_function) {
 8000504:	b480      	push	{r7}
 8000506:	b085      	sub	sp, #20
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
 800050c:	460b      	mov	r3, r1
 800050e:	70fb      	strb	r3, [r7, #3]
 8000510:	4613      	mov	r3, r2
 8000512:	70bb      	strb	r3, [r7, #2]
	int shift_amount = (pin % 8) * 4;
 8000514:	78fb      	ldrb	r3, [r7, #3]
 8000516:	f003 0307 	and.w	r3, r3, #7
 800051a:	009b      	lsls	r3, r3, #2
 800051c:	60fb      	str	r3, [r7, #12]
	return static_cast<uint32_t>(alt_function) << shift_amount;
 800051e:	78ba      	ldrb	r2, [r7, #2]
 8000520:	68fb      	ldr	r3, [r7, #12]
 8000522:	fa02 f303 	lsl.w	r3, r2, r3
}
 8000526:	4618      	mov	r0, r3
 8000528:	3714      	adds	r7, #20
 800052a:	46bd      	mov	sp, r7
 800052c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000530:	4770      	bx	lr

08000532 <main>:
	GPIOA.pin_output(PIN_5, state ? HIGH : LOW);
}

void uart_test();
int main(void)
{
 8000532:	b580      	push	{r7, lr}
 8000534:	af00      	add	r7, sp, #0
	uart_test();
 8000536:	f000 f803 	bl	8000540 <_Z9uart_testv>
}
 800053a:	2300      	movs	r3, #0
 800053c:	4618      	mov	r0, r3
 800053e:	bd80      	pop	{r7, pc}

08000540 <_Z9uart_testv>:


void uart_test() {
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0
	Systick SysTick;
	SysTick.configure_timer();
 8000546:	1d3b      	adds	r3, r7, #4
 8000548:	2101      	movs	r1, #1
 800054a:	4618      	mov	r0, r3
 800054c:	f000 f884 	bl	8000658 <_ZN7Systick15configure_timerEi>
	SysTick.enable();
 8000550:	1d3b      	adds	r3, r7, #4
 8000552:	4618      	mov	r0, r3
 8000554:	f000 f89a 	bl	800068c <_ZN7Systick6enableEv>

	CLI my_cli = CLI();
 8000558:	463b      	mov	r3, r7
 800055a:	4618      	mov	r0, r3
 800055c:	f7ff fe5a 	bl	8000214 <_ZN3CLIC1Ev>
	my_cli.run();
 8000560:	463b      	mov	r3, r7
 8000562:	4618      	mov	r0, r3
 8000564:	f7ff fe61 	bl	800022a <_ZN3CLI3runEv>

	while (1) {
 8000568:	bf00      	nop
 800056a:	e7fd      	b.n	8000568 <_Z9uart_testv+0x28>

0800056c <_Z41__static_initialization_and_destruction_0v>:

	}
}
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
GPIO GPIOA = GPIO(PORT_A);
 8000570:	2100      	movs	r1, #0
 8000572:	4802      	ldr	r0, [pc, #8]	@ (800057c <_Z41__static_initialization_and_destruction_0v+0x10>)
 8000574:	f7ff ff02 	bl	800037c <_ZN4GPIOC1E6port_t>
}
 8000578:	bf00      	nop
 800057a:	bd80      	pop	{r7, pc}
 800057c:	200000d8 	.word	0x200000d8

08000580 <_GLOBAL__sub_I_GPIOA>:
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
 8000584:	f7ff fff2 	bl	800056c <_Z41__static_initialization_and_destruction_0v>
 8000588:	bd80      	pop	{r7, pc}

0800058a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800058a:	b480      	push	{r7}
 800058c:	af00      	add	r7, sp, #0
  return 1;
 800058e:	2301      	movs	r3, #1
}
 8000590:	4618      	mov	r0, r3
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr

0800059a <_kill>:

int _kill(int pid, int sig)
{
 800059a:	b580      	push	{r7, lr}
 800059c:	b082      	sub	sp, #8
 800059e:	af00      	add	r7, sp, #0
 80005a0:	6078      	str	r0, [r7, #4]
 80005a2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80005a4:	f000 fba2 	bl	8000cec <__errno>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2216      	movs	r2, #22
 80005ac:	601a      	str	r2, [r3, #0]
  return -1;
 80005ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80005b2:	4618      	mov	r0, r3
 80005b4:	3708      	adds	r7, #8
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}

080005ba <_exit>:

void _exit (int status)
{
 80005ba:	b580      	push	{r7, lr}
 80005bc:	b082      	sub	sp, #8
 80005be:	af00      	add	r7, sp, #0
 80005c0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80005c2:	f04f 31ff 	mov.w	r1, #4294967295
 80005c6:	6878      	ldr	r0, [r7, #4]
 80005c8:	f7ff ffe7 	bl	800059a <_kill>
  while (1) {}    /* Make sure we hang here */
 80005cc:	bf00      	nop
 80005ce:	e7fd      	b.n	80005cc <_exit+0x12>

080005d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b086      	sub	sp, #24
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005d8:	4a14      	ldr	r2, [pc, #80]	@ (800062c <_sbrk+0x5c>)
 80005da:	4b15      	ldr	r3, [pc, #84]	@ (8000630 <_sbrk+0x60>)
 80005dc:	1ad3      	subs	r3, r2, r3
 80005de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005e0:	697b      	ldr	r3, [r7, #20]
 80005e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005e4:	4b13      	ldr	r3, [pc, #76]	@ (8000634 <_sbrk+0x64>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d102      	bne.n	80005f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005ec:	4b11      	ldr	r3, [pc, #68]	@ (8000634 <_sbrk+0x64>)
 80005ee:	4a12      	ldr	r2, [pc, #72]	@ (8000638 <_sbrk+0x68>)
 80005f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005f2:	4b10      	ldr	r3, [pc, #64]	@ (8000634 <_sbrk+0x64>)
 80005f4:	681a      	ldr	r2, [r3, #0]
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	4413      	add	r3, r2
 80005fa:	693a      	ldr	r2, [r7, #16]
 80005fc:	429a      	cmp	r2, r3
 80005fe:	d207      	bcs.n	8000610 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000600:	f000 fb74 	bl	8000cec <__errno>
 8000604:	4603      	mov	r3, r0
 8000606:	220c      	movs	r2, #12
 8000608:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800060a:	f04f 33ff 	mov.w	r3, #4294967295
 800060e:	e009      	b.n	8000624 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000610:	4b08      	ldr	r3, [pc, #32]	@ (8000634 <_sbrk+0x64>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000616:	4b07      	ldr	r3, [pc, #28]	@ (8000634 <_sbrk+0x64>)
 8000618:	681a      	ldr	r2, [r3, #0]
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	4413      	add	r3, r2
 800061e:	4a05      	ldr	r2, [pc, #20]	@ (8000634 <_sbrk+0x64>)
 8000620:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000622:	68fb      	ldr	r3, [r7, #12]
}
 8000624:	4618      	mov	r0, r3
 8000626:	3718      	adds	r7, #24
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	20020000 	.word	0x20020000
 8000630:	00000400 	.word	0x00000400
 8000634:	200000e0 	.word	0x200000e0
 8000638:	200002d0 	.word	0x200002d0

0800063c <SysTick_Handler>:
#define SYSTICK ((SysTick_TypeDef *)0xE000E010UL)

volatile uint32_t system_tick_ms = 0;
Subtimer Systick::subtimers[MAX_SUBTIMERS];

extern "C" void SysTick_Handler(void) {
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
    system_tick_ms++;
 8000640:	4b04      	ldr	r3, [pc, #16]	@ (8000654 <SysTick_Handler+0x18>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	3301      	adds	r3, #1
 8000646:	4a03      	ldr	r2, [pc, #12]	@ (8000654 <SysTick_Handler+0x18>)
 8000648:	6013      	str	r3, [r2, #0]
    Systick::tick_all();
 800064a:	f000 f841 	bl	80006d0 <_ZN7Systick8tick_allEv>
}
 800064e:	bf00      	nop
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	200000e4 	.word	0x200000e4

08000658 <_ZN7Systick15configure_timerEi>:

void Systick::configure_timer(int tick_duration_ms) {
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
 8000660:	6039      	str	r1, [r7, #0]
    disable();
 8000662:	6878      	ldr	r0, [r7, #4]
 8000664:	f000 f824 	bl	80006b0 <_ZN7Systick7disableEv>
    SYSTICK->LOAD = (16000 * tick_duration_ms) - 1;  // assuming 16 MHz system clock
 8000668:	683b      	ldr	r3, [r7, #0]
 800066a:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 800066e:	fb02 f303 	mul.w	r3, r2, r3
 8000672:	1e5a      	subs	r2, r3, #1
 8000674:	4b04      	ldr	r3, [pc, #16]	@ (8000688 <_ZN7Systick15configure_timerEi+0x30>)
 8000676:	605a      	str	r2, [r3, #4]
    SYSTICK->VAL = 0;
 8000678:	4b03      	ldr	r3, [pc, #12]	@ (8000688 <_ZN7Systick15configure_timerEi+0x30>)
 800067a:	2200      	movs	r2, #0
 800067c:	609a      	str	r2, [r3, #8]
}
 800067e:	bf00      	nop
 8000680:	3708      	adds	r7, #8
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	e000e010 	.word	0xe000e010

0800068c <_ZN7Systick6enableEv>:

void Systick::enable() {
 800068c:	b480      	push	{r7}
 800068e:	b083      	sub	sp, #12
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
    SYSTICK->CTRL |= SYSTICK_CTRL_EN | SYSTICK_CTRL_INT | SYSTICK_CTRL_SYSCLK;
 8000694:	4b05      	ldr	r3, [pc, #20]	@ (80006ac <_ZN7Systick6enableEv+0x20>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a04      	ldr	r2, [pc, #16]	@ (80006ac <_ZN7Systick6enableEv+0x20>)
 800069a:	f043 0307 	orr.w	r3, r3, #7
 800069e:	6013      	str	r3, [r2, #0]
}
 80006a0:	bf00      	nop
 80006a2:	370c      	adds	r7, #12
 80006a4:	46bd      	mov	sp, r7
 80006a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006aa:	4770      	bx	lr
 80006ac:	e000e010 	.word	0xe000e010

080006b0 <_ZN7Systick7disableEv>:

void Systick::disable() {
 80006b0:	b480      	push	{r7}
 80006b2:	b083      	sub	sp, #12
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
    SYSTICK->CTRL = 0;
 80006b8:	4b04      	ldr	r3, [pc, #16]	@ (80006cc <_ZN7Systick7disableEv+0x1c>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	601a      	str	r2, [r3, #0]
}
 80006be:	bf00      	nop
 80006c0:	370c      	adds	r7, #12
 80006c2:	46bd      	mov	sp, r7
 80006c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c8:	4770      	bx	lr
 80006ca:	bf00      	nop
 80006cc:	e000e010 	.word	0xe000e010

080006d0 <_ZN7Systick8tick_allEv>:
            return;
        }
    }
}

void Systick::tick_all() {
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
    for (int i = 0; i < MAX_SUBTIMERS; ++i) {
 80006d6:	2300      	movs	r3, #0
 80006d8:	607b      	str	r3, [r7, #4]
 80006da:	e049      	b.n	8000770 <_ZN7Systick8tick_allEv+0xa0>
        if (subtimers[i].active) {
 80006dc:	4a28      	ldr	r2, [pc, #160]	@ (8000780 <_ZN7Systick8tick_allEv+0xb0>)
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	011b      	lsls	r3, r3, #4
 80006e2:	4413      	add	r3, r2
 80006e4:	330c      	adds	r3, #12
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d03e      	beq.n	800076a <_ZN7Systick8tick_allEv+0x9a>
            subtimers[i].counter++;
 80006ec:	4a24      	ldr	r2, [pc, #144]	@ (8000780 <_ZN7Systick8tick_allEv+0xb0>)
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	011b      	lsls	r3, r3, #4
 80006f2:	4413      	add	r3, r2
 80006f4:	3304      	adds	r3, #4
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	1c5a      	adds	r2, r3, #1
 80006fa:	4921      	ldr	r1, [pc, #132]	@ (8000780 <_ZN7Systick8tick_allEv+0xb0>)
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	011b      	lsls	r3, r3, #4
 8000700:	440b      	add	r3, r1
 8000702:	3304      	adds	r3, #4
 8000704:	601a      	str	r2, [r3, #0]
            if (subtimers[i].counter >= subtimers[i].duration_ms) {
 8000706:	4a1e      	ldr	r2, [pc, #120]	@ (8000780 <_ZN7Systick8tick_allEv+0xb0>)
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	011b      	lsls	r3, r3, #4
 800070c:	4413      	add	r3, r2
 800070e:	3304      	adds	r3, #4
 8000710:	681a      	ldr	r2, [r3, #0]
 8000712:	491b      	ldr	r1, [pc, #108]	@ (8000780 <_ZN7Systick8tick_allEv+0xb0>)
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	011b      	lsls	r3, r3, #4
 8000718:	440b      	add	r3, r1
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	429a      	cmp	r2, r3
 800071e:	d324      	bcc.n	800076a <_ZN7Systick8tick_allEv+0x9a>
                subtimers[i].counter = 0;
 8000720:	4a17      	ldr	r2, [pc, #92]	@ (8000780 <_ZN7Systick8tick_allEv+0xb0>)
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	011b      	lsls	r3, r3, #4
 8000726:	4413      	add	r3, r2
 8000728:	3304      	adds	r3, #4
 800072a:	2200      	movs	r2, #0
 800072c:	601a      	str	r2, [r3, #0]
                if (subtimers[i].one_shot) {
 800072e:	4a14      	ldr	r2, [pc, #80]	@ (8000780 <_ZN7Systick8tick_allEv+0xb0>)
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	011b      	lsls	r3, r3, #4
 8000734:	4413      	add	r3, r2
 8000736:	330d      	adds	r3, #13
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	2b00      	cmp	r3, #0
 800073c:	d006      	beq.n	800074c <_ZN7Systick8tick_allEv+0x7c>
                    subtimers[i].active = false;
 800073e:	4a10      	ldr	r2, [pc, #64]	@ (8000780 <_ZN7Systick8tick_allEv+0xb0>)
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	011b      	lsls	r3, r3, #4
 8000744:	4413      	add	r3, r2
 8000746:	330c      	adds	r3, #12
 8000748:	2200      	movs	r2, #0
 800074a:	701a      	strb	r2, [r3, #0]
                }
                if (subtimers[i].handler) {
 800074c:	4a0c      	ldr	r2, [pc, #48]	@ (8000780 <_ZN7Systick8tick_allEv+0xb0>)
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	011b      	lsls	r3, r3, #4
 8000752:	4413      	add	r3, r2
 8000754:	3308      	adds	r3, #8
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	2b00      	cmp	r3, #0
 800075a:	d006      	beq.n	800076a <_ZN7Systick8tick_allEv+0x9a>
                    subtimers[i].handler();
 800075c:	4a08      	ldr	r2, [pc, #32]	@ (8000780 <_ZN7Systick8tick_allEv+0xb0>)
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	011b      	lsls	r3, r3, #4
 8000762:	4413      	add	r3, r2
 8000764:	3308      	adds	r3, #8
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4798      	blx	r3
    for (int i = 0; i < MAX_SUBTIMERS; ++i) {
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	3301      	adds	r3, #1
 800076e:	607b      	str	r3, [r7, #4]
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	2b07      	cmp	r3, #7
 8000774:	ddb2      	ble.n	80006dc <_ZN7Systick8tick_allEv+0xc>
                }
            }
        }
    }
}
 8000776:	bf00      	nop
 8000778:	bf00      	nop
 800077a:	3708      	adds	r7, #8
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	200000e8 	.word	0x200000e8

08000784 <_ZN4UARTC1E11usart_num_t>:
#define BUFFER_SIZE            100

UART* UART::usart_instances[6] = { nullptr };
static char echo_buf[2];

UART::UART(usart_num_t usart_num)
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
 800078c:	6039      	str	r1, [r7, #0]
    : usart_num(usart_num), gpio_port(PORT_A)
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	2200      	movs	r2, #0
 8000792:	721a      	strb	r2, [r3, #8]
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800079a:	60da      	str	r2, [r3, #12]
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	2208      	movs	r2, #8
 80007a0:	741a      	strb	r2, [r3, #16]
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	2201      	movs	r2, #1
 80007a6:	745a      	strb	r2, [r3, #17]
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	2200      	movs	r2, #0
 80007ac:	749a      	strb	r2, [r3, #18]
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	3314      	adds	r3, #20
 80007b2:	2100      	movs	r1, #0
 80007b4:	4618      	mov	r0, r3
 80007b6:	f7ff fde1 	bl	800037c <_ZN4GPIOC1E6port_t>
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	683a      	ldr	r2, [r7, #0]
 80007be:	61da      	str	r2, [r3, #28]
{
    switch (usart_num) {
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	2b01      	cmp	r3, #1
 80007c4:	d103      	bne.n	80007ce <_ZN4UARTC1E11usart_num_t+0x4a>
        case usart_num_t::USART2:
            usart_port_ = USART_2;
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	4a04      	ldr	r2, [pc, #16]	@ (80007dc <_ZN4UARTC1E11usart_num_t+0x58>)
 80007ca:	601a      	str	r2, [r3, #0]
            break;
 80007cc:	e000      	b.n	80007d0 <_ZN4UARTC1E11usart_num_t+0x4c>
        default:
            break;
 80007ce:	bf00      	nop
    }
}
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	4618      	mov	r0, r3
 80007d4:	3708      	adds	r7, #8
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	40004400 	.word	0x40004400

080007e0 <_ZN4UART6enableEv>:

void UART::enable() {
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
    switch (usart_num) {
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	69db      	ldr	r3, [r3, #28]
 80007ec:	2b01      	cmp	r3, #1
 80007ee:	d110      	bne.n	8000812 <_ZN4UART6enableEv+0x32>
        case usart_num_t::USART2:
            RCC_APB1ENR |= RCC_APB1ENR_USART2;
 80007f0:	4b0a      	ldr	r3, [pc, #40]	@ (800081c <_ZN4UART6enableEv+0x3c>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	4a09      	ldr	r2, [pc, #36]	@ (800081c <_ZN4UART6enableEv+0x3c>)
 80007f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007fa:	6013      	str	r3, [r2, #0]
            configure_pins();
 80007fc:	6878      	ldr	r0, [r7, #4]
 80007fe:	f000 f811 	bl	8000824 <_ZN4UART14configure_pinsEv>
            configure(usart_rec_buffer_t::LINEAR_BUFFER);
 8000802:	2101      	movs	r1, #1
 8000804:	6878      	ldr	r0, [r7, #4]
 8000806:	f000 f835 	bl	8000874 <_ZN4UART9configureE18usart_rec_buffer_t>
            usart_instances[1] = this;
 800080a:	4a05      	ldr	r2, [pc, #20]	@ (8000820 <_ZN4UART6enableEv+0x40>)
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	6053      	str	r3, [r2, #4]
            break;
 8000810:	e000      	b.n	8000814 <_ZN4UART6enableEv+0x34>
        default:
            break;
 8000812:	bf00      	nop
    }
}
 8000814:	bf00      	nop
 8000816:	3708      	adds	r7, #8
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	40023840 	.word	0x40023840
 8000820:	20000168 	.word	0x20000168

08000824 <_ZN4UART14configure_pinsEv>:

void UART::configure_pins() {
 8000824:	b580      	push	{r7, lr}
 8000826:	b084      	sub	sp, #16
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
    gpio_port.enable();
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	3314      	adds	r3, #20
 8000830:	4618      	mov	r0, r3
 8000832:	f7ff fdbd 	bl	80003b0 <_ZN4GPIO6enableEv>
    pin_t RX_PIN, TX_PIN;

    switch (usart_num) {
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	69db      	ldr	r3, [r3, #28]
 800083a:	2b01      	cmp	r3, #1
 800083c:	d104      	bne.n	8000848 <_ZN4UART14configure_pinsEv+0x24>
        case usart_num_t::USART2:
            RX_PIN = PIN_3;
 800083e:	2303      	movs	r3, #3
 8000840:	73fb      	strb	r3, [r7, #15]
            TX_PIN = PIN_2;
 8000842:	2302      	movs	r3, #2
 8000844:	73bb      	strb	r3, [r7, #14]
            break;
 8000846:	e000      	b.n	800084a <_ZN4UART14configure_pinsEv+0x26>
        default:
            break;
 8000848:	bf00      	nop
    }

    gpio_port.pin_setup(TX_PIN, ALT_FUNCTION, AF_7);
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	f103 0014 	add.w	r0, r3, #20
 8000850:	7bb9      	ldrb	r1, [r7, #14]
 8000852:	2307      	movs	r3, #7
 8000854:	2202      	movs	r2, #2
 8000856:	f7ff fdbd 	bl	80003d4 <_ZN4GPIO9pin_setupE5pin_t6mode_t14alt_function_t>
    gpio_port.pin_setup(RX_PIN, ALT_FUNCTION, AF_7);
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	f103 0014 	add.w	r0, r3, #20
 8000860:	7bf9      	ldrb	r1, [r7, #15]
 8000862:	2307      	movs	r3, #7
 8000864:	2202      	movs	r2, #2
 8000866:	f7ff fdb5 	bl	80003d4 <_ZN4GPIO9pin_setupE5pin_t6mode_t14alt_function_t>
}
 800086a:	bf00      	nop
 800086c:	3710      	adds	r7, #16
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
	...

08000874 <_ZN4UART9configureE18usart_rec_buffer_t>:

void UART::configure(usart_rec_buffer_t rec_buffer_type) {
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
 800087c:	6039      	str	r1, [r7, #0]
    usart_port_->CR1 |= USARTx_CR1_UE;
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	68da      	ldr	r2, [r3, #12]
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800088c:	60da      	str	r2, [r3, #12]
    usart_port_->BRR = BAUD_9600;
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	f240 6283 	movw	r2, #1667	@ 0x683
 8000896:	609a      	str	r2, [r3, #8]
    usart_port_->CR1 |= USARTx_CR2_TE;
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	68da      	ldr	r2, [r3, #12]
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	f042 0208 	orr.w	r2, r2, #8
 80008a6:	60da      	str	r2, [r3, #12]
    usart_port_->CR1 |= USARTx_CR1_RE;
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	68da      	ldr	r2, [r3, #12]
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	f042 0204 	orr.w	r2, r2, #4
 80008b6:	60da      	str	r2, [r3, #12]
    usart_port_->CR1 |= USARTx_CR1_RXNEIE;
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	68da      	ldr	r2, [r3, #12]
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	f042 0220 	orr.w	r2, r2, #32
 80008c6:	60da      	str	r2, [r3, #12]
    NVIC_ISER1 |= ISER1_USART2INT;
 80008c8:	4b10      	ldr	r3, [pc, #64]	@ (800090c <_ZN4UART9configureE18usart_rec_buffer_t+0x98>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4a0f      	ldr	r2, [pc, #60]	@ (800090c <_ZN4UART9configureE18usart_rec_buffer_t+0x98>)
 80008ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80008d2:	6013      	str	r3, [r2, #0]

    this->rec_buffer_type = rec_buffer_type;
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	683a      	ldr	r2, [r7, #0]
 80008d8:	62da      	str	r2, [r3, #44]	@ 0x2c
    buffer_open_index = 2;
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	2202      	movs	r2, #2
 80008de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    linear_buffer_ptr = new char[BUFFER_SIZE + 1];
 80008e2:	2065      	movs	r0, #101	@ 0x65
 80008e4:	f000 f8e6 	bl	8000ab4 <_Znaj>
 80008e8:	4603      	mov	r3, r0
 80008ea:	461a      	mov	r2, r3
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	631a      	str	r2, [r3, #48]	@ 0x30
    linear_buffer_ptr[0] = '\r';
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f4:	220d      	movs	r2, #13
 80008f6:	701a      	strb	r2, [r3, #0]
    linear_buffer_ptr[1] = '\n';
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fc:	3301      	adds	r3, #1
 80008fe:	220a      	movs	r2, #10
 8000900:	701a      	strb	r2, [r3, #0]
}
 8000902:	bf00      	nop
 8000904:	3708      	adds	r7, #8
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	e000e104 	.word	0xe000e104

08000910 <USART2_IRQHandler>:

extern "C" void USART2_IRQHandler(void) {
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
    auto* uart = UART::usart_instances[1];
 8000916:	4b13      	ldr	r3, [pc, #76]	@ (8000964 <USART2_IRQHandler+0x54>)
 8000918:	685b      	ldr	r3, [r3, #4]
 800091a:	607b      	str	r3, [r7, #4]
    uint32_t sr = uart->usart_port_->SR;
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	603b      	str	r3, [r7, #0]

    if ((sr & USARTx_SR_TXE) &&
 8000924:	683b      	ldr	r3, [r7, #0]
 8000926:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800092a:	2b00      	cmp	r3, #0
 800092c:	d008      	beq.n	8000940 <USART2_IRQHandler+0x30>
        (uart->usart_port_->CR1 & USARTx_CR1_TXEIE))
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	68db      	ldr	r3, [r3, #12]
 8000934:	f003 0380 	and.w	r3, r3, #128	@ 0x80
    if ((sr & USARTx_SR_TXE) &&
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <USART2_IRQHandler+0x30>
 800093c:	2301      	movs	r3, #1
 800093e:	e000      	b.n	8000942 <USART2_IRQHandler+0x32>
 8000940:	2300      	movs	r3, #0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d002      	beq.n	800094c <USART2_IRQHandler+0x3c>
    {
        uart->send_byte_handler();
 8000946:	6878      	ldr	r0, [r7, #4]
 8000948:	f000 f80e 	bl	8000968 <_ZN4UART17send_byte_handlerEv>
    }

    if (sr & USARTx_SR_RXNE) {
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	f003 0320 	and.w	r3, r3, #32
 8000952:	2b00      	cmp	r3, #0
 8000954:	d002      	beq.n	800095c <USART2_IRQHandler+0x4c>
        uart->read_byte();
 8000956:	6878      	ldr	r0, [r7, #4]
 8000958:	f000 f860 	bl	8000a1c <_ZN4UART9read_byteEv>
    }
}
 800095c:	bf00      	nop
 800095e:	3708      	adds	r7, #8
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	20000168 	.word	0x20000168

08000968 <_ZN4UART17send_byte_handlerEv>:


void UART::send_byte_handler() {
 8000968:	b480      	push	{r7}
 800096a:	b083      	sub	sp, #12
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
    if (curr_pos < message_len - 1) {
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000978:	3b01      	subs	r3, #1
 800097a:	429a      	cmp	r2, r3
 800097c:	da0c      	bge.n	8000998 <_ZN4UART17send_byte_handlerEv+0x30>
        usart_port_->DR = message[curr_pos++];
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	6a1a      	ldr	r2, [r3, #32]
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000986:	1c58      	adds	r0, r3, #1
 8000988:	6879      	ldr	r1, [r7, #4]
 800098a:	6288      	str	r0, [r1, #40]	@ 0x28
 800098c:	4413      	add	r3, r2
 800098e:	781a      	ldrb	r2, [r3, #0]
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	605a      	str	r2, [r3, #4]
    } else if (curr_pos == message_len - 1) {
        usart_port_->DR = message[curr_pos];
        usart_port_->CR1 &= ~USARTx_CR1_TXEIE;
        tx_in_progress = false;
    }
}
 8000996:	e01a      	b.n	80009ce <_ZN4UART17send_byte_handlerEv+0x66>
    } else if (curr_pos == message_len - 1) {
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80009a0:	3b01      	subs	r3, #1
 80009a2:	429a      	cmp	r2, r3
 80009a4:	d113      	bne.n	80009ce <_ZN4UART17send_byte_handlerEv+0x66>
        usart_port_->DR = message[curr_pos];
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	6a1b      	ldr	r3, [r3, #32]
 80009aa:	687a      	ldr	r2, [r7, #4]
 80009ac:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80009ae:	4413      	add	r3, r2
 80009b0:	781a      	ldrb	r2, [r3, #0]
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	605a      	str	r2, [r3, #4]
        usart_port_->CR1 &= ~USARTx_CR1_TXEIE;
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	68da      	ldr	r2, [r3, #12]
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80009c6:	60da      	str	r2, [r3, #12]
        tx_in_progress = false;
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	2200      	movs	r2, #0
 80009cc:	721a      	strb	r2, [r3, #8]
}
 80009ce:	bf00      	nop
 80009d0:	370c      	adds	r7, #12
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr

080009da <_ZN4UART4sendEPc>:

void UART::send(char* message) {
 80009da:	b580      	push	{r7, lr}
 80009dc:	b082      	sub	sp, #8
 80009de:	af00      	add	r7, sp, #0
 80009e0:	6078      	str	r0, [r7, #4]
 80009e2:	6039      	str	r1, [r7, #0]
    this->message = message;
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	683a      	ldr	r2, [r7, #0]
 80009e8:	621a      	str	r2, [r3, #32]
    this->message_len = std::strlen(message);
 80009ea:	6838      	ldr	r0, [r7, #0]
 80009ec:	f7ff fc0a 	bl	8000204 <strlen>
 80009f0:	4603      	mov	r3, r0
 80009f2:	461a      	mov	r2, r3
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	625a      	str	r2, [r3, #36]	@ 0x24
    curr_pos = 0;
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	2200      	movs	r2, #0
 80009fc:	629a      	str	r2, [r3, #40]	@ 0x28
    tx_in_progress = true;
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	2201      	movs	r2, #1
 8000a02:	721a      	strb	r2, [r3, #8]

    usart_port_->CR1 |= USARTx_CR1_TXEIE;
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	68da      	ldr	r2, [r3, #12]
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000a12:	60da      	str	r2, [r3, #12]
}
 8000a14:	bf00      	nop
 8000a16:	3708      	adds	r7, #8
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}

08000a1c <_ZN4UART9read_byteEv>:

void UART::read_byte() {
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b084      	sub	sp, #16
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
	uint32_t received_byte = usart_port_->DR;
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	685b      	ldr	r3, [r3, #4]
 8000a2a:	60fb      	str	r3, [r7, #12]
	usart_manager->manage_read_byte(received_byte);
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	685b      	ldr	r3, [r3, #4]
 8000a30:	68f9      	ldr	r1, [r7, #12]
 8000a32:	4618      	mov	r0, r3
 8000a34:	f7ff fc46 	bl	80002c4 <_ZN7Manager16manage_read_byteEm>
}
 8000a38:	bf00      	nop
 8000a3a:	3710      	adds	r7, #16
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}

08000a40 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a40:	480d      	ldr	r0, [pc, #52]	@ (8000a78 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a42:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a44:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a48:	480c      	ldr	r0, [pc, #48]	@ (8000a7c <LoopForever+0x6>)
  ldr r1, =_edata
 8000a4a:	490d      	ldr	r1, [pc, #52]	@ (8000a80 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a4c:	4a0d      	ldr	r2, [pc, #52]	@ (8000a84 <LoopForever+0xe>)
  movs r3, #0
 8000a4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a50:	e002      	b.n	8000a58 <LoopCopyDataInit>

08000a52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a56:	3304      	adds	r3, #4

08000a58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a5c:	d3f9      	bcc.n	8000a52 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a5e:	4a0a      	ldr	r2, [pc, #40]	@ (8000a88 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a60:	4c0a      	ldr	r4, [pc, #40]	@ (8000a8c <LoopForever+0x16>)
  movs r3, #0
 8000a62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a64:	e001      	b.n	8000a6a <LoopFillZerobss>

08000a66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a68:	3204      	adds	r2, #4

08000a6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a6c:	d3fb      	bcc.n	8000a66 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a6e:	f000 f943 	bl	8000cf8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a72:	f7ff fd5e 	bl	8000532 <main>

08000a76 <LoopForever>:

LoopForever:
  b LoopForever
 8000a76:	e7fe      	b.n	8000a76 <LoopForever>
  ldr   r0, =_estack
 8000a78:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a80:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 8000a84:	08000d70 	.word	0x08000d70
  ldr r2, =_sbss
 8000a88:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 8000a8c:	200002cc 	.word	0x200002cc

08000a90 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a90:	e7fe      	b.n	8000a90 <ADC_IRQHandler>

08000a92 <_Znwj>:
 8000a92:	2801      	cmp	r0, #1
 8000a94:	bf38      	it	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	b510      	push	{r4, lr}
 8000a9a:	4604      	mov	r4, r0
 8000a9c:	4620      	mov	r0, r4
 8000a9e:	f000 f81b 	bl	8000ad8 <malloc>
 8000aa2:	b100      	cbz	r0, 8000aa6 <_Znwj+0x14>
 8000aa4:	bd10      	pop	{r4, pc}
 8000aa6:	f000 f807 	bl	8000ab8 <_ZSt15get_new_handlerv>
 8000aaa:	b908      	cbnz	r0, 8000ab0 <_Znwj+0x1e>
 8000aac:	f000 f80c 	bl	8000ac8 <abort>
 8000ab0:	4780      	blx	r0
 8000ab2:	e7f3      	b.n	8000a9c <_Znwj+0xa>

08000ab4 <_Znaj>:
 8000ab4:	f7ff bfed 	b.w	8000a92 <_Znwj>

08000ab8 <_ZSt15get_new_handlerv>:
 8000ab8:	4b02      	ldr	r3, [pc, #8]	@ (8000ac4 <_ZSt15get_new_handlerv+0xc>)
 8000aba:	6818      	ldr	r0, [r3, #0]
 8000abc:	f3bf 8f5b 	dmb	ish
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	20000180 	.word	0x20000180

08000ac8 <abort>:
 8000ac8:	b508      	push	{r3, lr}
 8000aca:	2006      	movs	r0, #6
 8000acc:	f000 f8e2 	bl	8000c94 <raise>
 8000ad0:	2001      	movs	r0, #1
 8000ad2:	f7ff fd72 	bl	80005ba <_exit>
	...

08000ad8 <malloc>:
 8000ad8:	4b02      	ldr	r3, [pc, #8]	@ (8000ae4 <malloc+0xc>)
 8000ada:	4601      	mov	r1, r0
 8000adc:	6818      	ldr	r0, [r3, #0]
 8000ade:	f000 b825 	b.w	8000b2c <_malloc_r>
 8000ae2:	bf00      	nop
 8000ae4:	20000004 	.word	0x20000004

08000ae8 <sbrk_aligned>:
 8000ae8:	b570      	push	{r4, r5, r6, lr}
 8000aea:	4e0f      	ldr	r6, [pc, #60]	@ (8000b28 <sbrk_aligned+0x40>)
 8000aec:	460c      	mov	r4, r1
 8000aee:	6831      	ldr	r1, [r6, #0]
 8000af0:	4605      	mov	r5, r0
 8000af2:	b911      	cbnz	r1, 8000afa <sbrk_aligned+0x12>
 8000af4:	f000 f8ea 	bl	8000ccc <_sbrk_r>
 8000af8:	6030      	str	r0, [r6, #0]
 8000afa:	4621      	mov	r1, r4
 8000afc:	4628      	mov	r0, r5
 8000afe:	f000 f8e5 	bl	8000ccc <_sbrk_r>
 8000b02:	1c43      	adds	r3, r0, #1
 8000b04:	d103      	bne.n	8000b0e <sbrk_aligned+0x26>
 8000b06:	f04f 34ff 	mov.w	r4, #4294967295
 8000b0a:	4620      	mov	r0, r4
 8000b0c:	bd70      	pop	{r4, r5, r6, pc}
 8000b0e:	1cc4      	adds	r4, r0, #3
 8000b10:	f024 0403 	bic.w	r4, r4, #3
 8000b14:	42a0      	cmp	r0, r4
 8000b16:	d0f8      	beq.n	8000b0a <sbrk_aligned+0x22>
 8000b18:	1a21      	subs	r1, r4, r0
 8000b1a:	4628      	mov	r0, r5
 8000b1c:	f000 f8d6 	bl	8000ccc <_sbrk_r>
 8000b20:	3001      	adds	r0, #1
 8000b22:	d1f2      	bne.n	8000b0a <sbrk_aligned+0x22>
 8000b24:	e7ef      	b.n	8000b06 <sbrk_aligned+0x1e>
 8000b26:	bf00      	nop
 8000b28:	20000184 	.word	0x20000184

08000b2c <_malloc_r>:
 8000b2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000b30:	1ccd      	adds	r5, r1, #3
 8000b32:	f025 0503 	bic.w	r5, r5, #3
 8000b36:	3508      	adds	r5, #8
 8000b38:	2d0c      	cmp	r5, #12
 8000b3a:	bf38      	it	cc
 8000b3c:	250c      	movcc	r5, #12
 8000b3e:	2d00      	cmp	r5, #0
 8000b40:	4606      	mov	r6, r0
 8000b42:	db01      	blt.n	8000b48 <_malloc_r+0x1c>
 8000b44:	42a9      	cmp	r1, r5
 8000b46:	d904      	bls.n	8000b52 <_malloc_r+0x26>
 8000b48:	230c      	movs	r3, #12
 8000b4a:	6033      	str	r3, [r6, #0]
 8000b4c:	2000      	movs	r0, #0
 8000b4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000b52:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000c28 <_malloc_r+0xfc>
 8000b56:	f000 f869 	bl	8000c2c <__malloc_lock>
 8000b5a:	f8d8 3000 	ldr.w	r3, [r8]
 8000b5e:	461c      	mov	r4, r3
 8000b60:	bb44      	cbnz	r4, 8000bb4 <_malloc_r+0x88>
 8000b62:	4629      	mov	r1, r5
 8000b64:	4630      	mov	r0, r6
 8000b66:	f7ff ffbf 	bl	8000ae8 <sbrk_aligned>
 8000b6a:	1c43      	adds	r3, r0, #1
 8000b6c:	4604      	mov	r4, r0
 8000b6e:	d158      	bne.n	8000c22 <_malloc_r+0xf6>
 8000b70:	f8d8 4000 	ldr.w	r4, [r8]
 8000b74:	4627      	mov	r7, r4
 8000b76:	2f00      	cmp	r7, #0
 8000b78:	d143      	bne.n	8000c02 <_malloc_r+0xd6>
 8000b7a:	2c00      	cmp	r4, #0
 8000b7c:	d04b      	beq.n	8000c16 <_malloc_r+0xea>
 8000b7e:	6823      	ldr	r3, [r4, #0]
 8000b80:	4639      	mov	r1, r7
 8000b82:	4630      	mov	r0, r6
 8000b84:	eb04 0903 	add.w	r9, r4, r3
 8000b88:	f000 f8a0 	bl	8000ccc <_sbrk_r>
 8000b8c:	4581      	cmp	r9, r0
 8000b8e:	d142      	bne.n	8000c16 <_malloc_r+0xea>
 8000b90:	6821      	ldr	r1, [r4, #0]
 8000b92:	1a6d      	subs	r5, r5, r1
 8000b94:	4629      	mov	r1, r5
 8000b96:	4630      	mov	r0, r6
 8000b98:	f7ff ffa6 	bl	8000ae8 <sbrk_aligned>
 8000b9c:	3001      	adds	r0, #1
 8000b9e:	d03a      	beq.n	8000c16 <_malloc_r+0xea>
 8000ba0:	6823      	ldr	r3, [r4, #0]
 8000ba2:	442b      	add	r3, r5
 8000ba4:	6023      	str	r3, [r4, #0]
 8000ba6:	f8d8 3000 	ldr.w	r3, [r8]
 8000baa:	685a      	ldr	r2, [r3, #4]
 8000bac:	bb62      	cbnz	r2, 8000c08 <_malloc_r+0xdc>
 8000bae:	f8c8 7000 	str.w	r7, [r8]
 8000bb2:	e00f      	b.n	8000bd4 <_malloc_r+0xa8>
 8000bb4:	6822      	ldr	r2, [r4, #0]
 8000bb6:	1b52      	subs	r2, r2, r5
 8000bb8:	d420      	bmi.n	8000bfc <_malloc_r+0xd0>
 8000bba:	2a0b      	cmp	r2, #11
 8000bbc:	d917      	bls.n	8000bee <_malloc_r+0xc2>
 8000bbe:	1961      	adds	r1, r4, r5
 8000bc0:	42a3      	cmp	r3, r4
 8000bc2:	6025      	str	r5, [r4, #0]
 8000bc4:	bf18      	it	ne
 8000bc6:	6059      	strne	r1, [r3, #4]
 8000bc8:	6863      	ldr	r3, [r4, #4]
 8000bca:	bf08      	it	eq
 8000bcc:	f8c8 1000 	streq.w	r1, [r8]
 8000bd0:	5162      	str	r2, [r4, r5]
 8000bd2:	604b      	str	r3, [r1, #4]
 8000bd4:	4630      	mov	r0, r6
 8000bd6:	f000 f82f 	bl	8000c38 <__malloc_unlock>
 8000bda:	f104 000b 	add.w	r0, r4, #11
 8000bde:	1d23      	adds	r3, r4, #4
 8000be0:	f020 0007 	bic.w	r0, r0, #7
 8000be4:	1ac2      	subs	r2, r0, r3
 8000be6:	bf1c      	itt	ne
 8000be8:	1a1b      	subne	r3, r3, r0
 8000bea:	50a3      	strne	r3, [r4, r2]
 8000bec:	e7af      	b.n	8000b4e <_malloc_r+0x22>
 8000bee:	6862      	ldr	r2, [r4, #4]
 8000bf0:	42a3      	cmp	r3, r4
 8000bf2:	bf0c      	ite	eq
 8000bf4:	f8c8 2000 	streq.w	r2, [r8]
 8000bf8:	605a      	strne	r2, [r3, #4]
 8000bfa:	e7eb      	b.n	8000bd4 <_malloc_r+0xa8>
 8000bfc:	4623      	mov	r3, r4
 8000bfe:	6864      	ldr	r4, [r4, #4]
 8000c00:	e7ae      	b.n	8000b60 <_malloc_r+0x34>
 8000c02:	463c      	mov	r4, r7
 8000c04:	687f      	ldr	r7, [r7, #4]
 8000c06:	e7b6      	b.n	8000b76 <_malloc_r+0x4a>
 8000c08:	461a      	mov	r2, r3
 8000c0a:	685b      	ldr	r3, [r3, #4]
 8000c0c:	42a3      	cmp	r3, r4
 8000c0e:	d1fb      	bne.n	8000c08 <_malloc_r+0xdc>
 8000c10:	2300      	movs	r3, #0
 8000c12:	6053      	str	r3, [r2, #4]
 8000c14:	e7de      	b.n	8000bd4 <_malloc_r+0xa8>
 8000c16:	230c      	movs	r3, #12
 8000c18:	6033      	str	r3, [r6, #0]
 8000c1a:	4630      	mov	r0, r6
 8000c1c:	f000 f80c 	bl	8000c38 <__malloc_unlock>
 8000c20:	e794      	b.n	8000b4c <_malloc_r+0x20>
 8000c22:	6005      	str	r5, [r0, #0]
 8000c24:	e7d6      	b.n	8000bd4 <_malloc_r+0xa8>
 8000c26:	bf00      	nop
 8000c28:	20000188 	.word	0x20000188

08000c2c <__malloc_lock>:
 8000c2c:	4801      	ldr	r0, [pc, #4]	@ (8000c34 <__malloc_lock+0x8>)
 8000c2e:	f000 b887 	b.w	8000d40 <__retarget_lock_acquire_recursive>
 8000c32:	bf00      	nop
 8000c34:	200002c8 	.word	0x200002c8

08000c38 <__malloc_unlock>:
 8000c38:	4801      	ldr	r0, [pc, #4]	@ (8000c40 <__malloc_unlock+0x8>)
 8000c3a:	f000 b882 	b.w	8000d42 <__retarget_lock_release_recursive>
 8000c3e:	bf00      	nop
 8000c40:	200002c8 	.word	0x200002c8

08000c44 <_raise_r>:
 8000c44:	291f      	cmp	r1, #31
 8000c46:	b538      	push	{r3, r4, r5, lr}
 8000c48:	4605      	mov	r5, r0
 8000c4a:	460c      	mov	r4, r1
 8000c4c:	d904      	bls.n	8000c58 <_raise_r+0x14>
 8000c4e:	2316      	movs	r3, #22
 8000c50:	6003      	str	r3, [r0, #0]
 8000c52:	f04f 30ff 	mov.w	r0, #4294967295
 8000c56:	bd38      	pop	{r3, r4, r5, pc}
 8000c58:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8000c5a:	b112      	cbz	r2, 8000c62 <_raise_r+0x1e>
 8000c5c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8000c60:	b94b      	cbnz	r3, 8000c76 <_raise_r+0x32>
 8000c62:	4628      	mov	r0, r5
 8000c64:	f000 f830 	bl	8000cc8 <_getpid_r>
 8000c68:	4622      	mov	r2, r4
 8000c6a:	4601      	mov	r1, r0
 8000c6c:	4628      	mov	r0, r5
 8000c6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c72:	f000 b817 	b.w	8000ca4 <_kill_r>
 8000c76:	2b01      	cmp	r3, #1
 8000c78:	d00a      	beq.n	8000c90 <_raise_r+0x4c>
 8000c7a:	1c59      	adds	r1, r3, #1
 8000c7c:	d103      	bne.n	8000c86 <_raise_r+0x42>
 8000c7e:	2316      	movs	r3, #22
 8000c80:	6003      	str	r3, [r0, #0]
 8000c82:	2001      	movs	r0, #1
 8000c84:	e7e7      	b.n	8000c56 <_raise_r+0x12>
 8000c86:	2100      	movs	r1, #0
 8000c88:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8000c8c:	4620      	mov	r0, r4
 8000c8e:	4798      	blx	r3
 8000c90:	2000      	movs	r0, #0
 8000c92:	e7e0      	b.n	8000c56 <_raise_r+0x12>

08000c94 <raise>:
 8000c94:	4b02      	ldr	r3, [pc, #8]	@ (8000ca0 <raise+0xc>)
 8000c96:	4601      	mov	r1, r0
 8000c98:	6818      	ldr	r0, [r3, #0]
 8000c9a:	f7ff bfd3 	b.w	8000c44 <_raise_r>
 8000c9e:	bf00      	nop
 8000ca0:	20000004 	.word	0x20000004

08000ca4 <_kill_r>:
 8000ca4:	b538      	push	{r3, r4, r5, lr}
 8000ca6:	4d07      	ldr	r5, [pc, #28]	@ (8000cc4 <_kill_r+0x20>)
 8000ca8:	2300      	movs	r3, #0
 8000caa:	4604      	mov	r4, r0
 8000cac:	4608      	mov	r0, r1
 8000cae:	4611      	mov	r1, r2
 8000cb0:	602b      	str	r3, [r5, #0]
 8000cb2:	f7ff fc72 	bl	800059a <_kill>
 8000cb6:	1c43      	adds	r3, r0, #1
 8000cb8:	d102      	bne.n	8000cc0 <_kill_r+0x1c>
 8000cba:	682b      	ldr	r3, [r5, #0]
 8000cbc:	b103      	cbz	r3, 8000cc0 <_kill_r+0x1c>
 8000cbe:	6023      	str	r3, [r4, #0]
 8000cc0:	bd38      	pop	{r3, r4, r5, pc}
 8000cc2:	bf00      	nop
 8000cc4:	200002c4 	.word	0x200002c4

08000cc8 <_getpid_r>:
 8000cc8:	f7ff bc5f 	b.w	800058a <_getpid>

08000ccc <_sbrk_r>:
 8000ccc:	b538      	push	{r3, r4, r5, lr}
 8000cce:	4d06      	ldr	r5, [pc, #24]	@ (8000ce8 <_sbrk_r+0x1c>)
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	4604      	mov	r4, r0
 8000cd4:	4608      	mov	r0, r1
 8000cd6:	602b      	str	r3, [r5, #0]
 8000cd8:	f7ff fc7a 	bl	80005d0 <_sbrk>
 8000cdc:	1c43      	adds	r3, r0, #1
 8000cde:	d102      	bne.n	8000ce6 <_sbrk_r+0x1a>
 8000ce0:	682b      	ldr	r3, [r5, #0]
 8000ce2:	b103      	cbz	r3, 8000ce6 <_sbrk_r+0x1a>
 8000ce4:	6023      	str	r3, [r4, #0]
 8000ce6:	bd38      	pop	{r3, r4, r5, pc}
 8000ce8:	200002c4 	.word	0x200002c4

08000cec <__errno>:
 8000cec:	4b01      	ldr	r3, [pc, #4]	@ (8000cf4 <__errno+0x8>)
 8000cee:	6818      	ldr	r0, [r3, #0]
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	20000004 	.word	0x20000004

08000cf8 <__libc_init_array>:
 8000cf8:	b570      	push	{r4, r5, r6, lr}
 8000cfa:	4d0d      	ldr	r5, [pc, #52]	@ (8000d30 <__libc_init_array+0x38>)
 8000cfc:	4c0d      	ldr	r4, [pc, #52]	@ (8000d34 <__libc_init_array+0x3c>)
 8000cfe:	1b64      	subs	r4, r4, r5
 8000d00:	10a4      	asrs	r4, r4, #2
 8000d02:	2600      	movs	r6, #0
 8000d04:	42a6      	cmp	r6, r4
 8000d06:	d109      	bne.n	8000d1c <__libc_init_array+0x24>
 8000d08:	4d0b      	ldr	r5, [pc, #44]	@ (8000d38 <__libc_init_array+0x40>)
 8000d0a:	4c0c      	ldr	r4, [pc, #48]	@ (8000d3c <__libc_init_array+0x44>)
 8000d0c:	f000 f81a 	bl	8000d44 <_init>
 8000d10:	1b64      	subs	r4, r4, r5
 8000d12:	10a4      	asrs	r4, r4, #2
 8000d14:	2600      	movs	r6, #0
 8000d16:	42a6      	cmp	r6, r4
 8000d18:	d105      	bne.n	8000d26 <__libc_init_array+0x2e>
 8000d1a:	bd70      	pop	{r4, r5, r6, pc}
 8000d1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d20:	4798      	blx	r3
 8000d22:	3601      	adds	r6, #1
 8000d24:	e7ee      	b.n	8000d04 <__libc_init_array+0xc>
 8000d26:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d2a:	4798      	blx	r3
 8000d2c:	3601      	adds	r6, #1
 8000d2e:	e7f2      	b.n	8000d16 <__libc_init_array+0x1e>
 8000d30:	08000d64 	.word	0x08000d64
 8000d34:	08000d64 	.word	0x08000d64
 8000d38:	08000d64 	.word	0x08000d64
 8000d3c:	08000d6c 	.word	0x08000d6c

08000d40 <__retarget_lock_acquire_recursive>:
 8000d40:	4770      	bx	lr

08000d42 <__retarget_lock_release_recursive>:
 8000d42:	4770      	bx	lr

08000d44 <_init>:
 8000d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d46:	bf00      	nop
 8000d48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d4a:	bc08      	pop	{r3}
 8000d4c:	469e      	mov	lr, r3
 8000d4e:	4770      	bx	lr

08000d50 <_fini>:
 8000d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d52:	bf00      	nop
 8000d54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d56:	bc08      	pop	{r3}
 8000d58:	469e      	mov	lr, r3
 8000d5a:	4770      	bx	lr
